#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 24, 2018 11:51:52 AM SAST  platform: Linux

import sys

from socket import *
import time

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

# import GUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.resizable(0,0)
    top = Client (root)
    # GUI_support.init(root, top)
    root.mainloop()

w = None
def create_Client(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Client (w)
    # GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Client():
    global w
    w.destroy()
    w = None


class Client:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x450+410+87")
        top.title("Client")
        top.configure(highlightcolor="black")



        self.Canvas1 = Canvas(top)
        self.Canvas1.place(relx=0.0, rely=0.0, relheight=1.002, relwidth=1.002)
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(relief=RIDGE)
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(width=601)

        self.edtLower = Entry(self.Canvas1)
        self.edtLower.place(relx=0.416, rely=0.177,height=30, relwidth=0.143)
        self.edtLower.configure(background="white")
        self.edtLower.configure(font="TkFixedFont")
        self.edtLower.configure(selectbackground="#c4c4c4")

        self.edtUpper = Entry(self.Canvas1)
        self.edtUpper.place(relx=0.416, rely=0.377,height=30, relwidth=0.143)
        self.edtUpper.configure(background="white")
        self.edtUpper.configure(font="TkFixedFont")
        self.edtUpper.configure(selectbackground="#c4c4c4")

        self.Label1 = Label(self.Canvas1)
        self.Label1.place(relx=0.416, rely=0.133, height=18, width=83)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Lower Bound''')

        self.Label2 = Label(self.Canvas1)
        self.Label2.place(relx=0.416, rely=0.333, height=18, width=84)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Upper Bound''')

        self.cnvOutputs = Canvas(self.Canvas1)
        self.cnvOutputs.place(relx=0.1, rely=0.71, relheight=0.246, relwidth=0.8)

        self.cnvOutputs.configure(borderwidth="2")
        self.cnvOutputs.configure(relief=RIDGE)
        self.cnvOutputs.configure(selectbackground="#c4c4c4")
        self.cnvOutputs.configure(width=481)

        self.Label3 = Label(self.cnvOutputs)
        self.Label3.place(relx=0.437, rely=0.09, height=18, width=47)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''Output''')


        self.out1 = Label(self.cnvOutputs, text="")
        self.out1.pack()
        self.out1.place(relx=0.01, rely=0.36)

        self.out2 = Label(self.cnvOutputs , text="")
        self.out2.pack()
        self.out2.place(relx=0.01, rely=0.586)

        self.out3 = Label(self.cnvOutputs , text="")
        self.out3.pack()
        self.out3.place(relx=0.01, rely=0.786)
        
        def callback():
        
            self.out1.configure(text="")
            self.out2.configure(text="")
            self.out3.configure(text="")

            #client
            lower = self.edtLower.get()
            upper = self.edtUpper.get()

            try:
                no1 = int(lower)
                no2 = int(upper)

                if no1 == abs(no1) and no2 == abs(no2):

                    server1Name = '127.0.0.1'
                    server1Port = 12000
                    server2Name = '127.0.0.1'
                    server2Port = 16000



                    clientSocket1 = socket (AF_INET, SOCK_STREAM)
                    clientSocket1.connect ((server1Name, server1Port))
                    clientSocket2 = socket (AF_INET, SOCK_STREAM)
                    clientSocket2.connect ((server2Name, server2Port))

                    range11 = no1
                    range12 = 0
                    range21 = 0 
                    range22 = no2

                    if (int (no1) + int (no2)) % 2 == 0:
	                    range12 = (int (no1) + int (no2)) / 2
                    else:
	                    range12 = int ((int (no1) + int (no2)) / 2)

                    range21 = range12 + 1
                    vals1 = str (range11) + " " + str (range12)
                    timer1 = time.time() * 1000;
                    clientSocket1.send (str.encode (vals1))
                    count1 = clientSocket1.recv (1024)
                    vals2 = str (range21) + " " + str (range22)
                    timer2 = time.time() * 1000;
                    clientSocket2.send (str.encode (vals2))
                    count2 = clientSocket2.recv (1024)


                    time1 = time.time() * 1000 - timer1
                    time2 = time.time() * 1000 - timer2

                    # output
                    
                    self.edtLower.delete(0, END)
                    self.edtUpper.delete(0, END)
                    
                    """
                    out = str("Reply From Server 1: " + str(count1.decode ("ascii")) + "; Time: " + str (time1/float(1000)) + " seconds")
                    self.out1 = Label(self.cnvOutputs, text=out)
                    self.out1.pack()
                    self.out1.place(relx=0.01, rely=0.36)

                    out = str("Reply From Server 2: " + str(count2.decode ("ascii")) + "; Time: " + str (time2/float(1000)) + " seconds")
                    self.out2 = Label(self.cnvOutputs , text=out)
                    self.out2.pack()
                    self.out2.place(relx=0.01, rely=0.586)

                    out = str("Total: " + str(int (count1.decode ("ascii")) + int (count2.decode ("ascii"))))
                    self.out3 = Label(self.cnvOutputs , text=out)
                    self.out3.pack()
                    self.out3.place(relx=0.01, rely=0.786)
                    """
                    out = str("Reply From Server 1: " + str(count1.decode ("ascii")) + "; Time: " + str (time1/float(1000)) + " seconds")
                    self.out1.configure(text=out)

                    out = str("Reply From Server 2: " + str(count2.decode ("ascii")) + "; Time: " + str (time2/float(1000)) + " seconds")
                    self.out2.configure(text=out) 

                    out = str("Total: " + str(int (count1.decode ("ascii")) + int (count2.decode ("ascii"))))
                    self.out3.configure(text=out)                  

                    self.edtLower.focus()

                    clientSocket2.close()
                    clientSocket1.close()
                else:
                    self.out1.configure(text="Invalid input..")
                    self.out2.configure(text="")
                    self.out3.configure(text="")

            except:
                self.out1.configure(text="Invalid input..")
                self.out2.configure(text="")
                self.out3.configure(text="")
                

        self.btnCount = Button(self.Canvas1)
        self.btnCount.place(relx=0.366, rely=0.554, height=36, width=146)
        self.btnCount.configure(activebackground="#d9d9d9")
        self.btnCount.configure(command=callback)
        self.btnCount.configure(text='''Count Primes''')
        self.btnCount.configure(width=146)




if __name__ == '__main__':
    vp_start_gui()



